geom_bar(stat="identity",aes(fill=Year),position="dodge")+
scale_y_continuous(breaks = seq(0,44000,by=4000),limits = c(0,44000))+
scale_fill_manual(values=c("#9FDF58", "#8FCB4D", "#7FB843", "#70A439", "#60912F", "#517E25", "#006600"))+
labs(x="Number of Total Stops(and above)",y="LPCnt")+
ggtitle(expression(atop("Required LPCnt for Sorter/OPEX by Parcel Stops", atop(italic("Peak Day"), "")))) +
theme(plot.title = element_text(size = 15, face = "bold", colour = "black", vjust = -1))
PLCntPlot
figList2016 <- PlotByStopV2(datPeakDaily2016)
Qty2016<-figList2016[[1]]+
geom_hline(yintercept=192000,colour="#535353",size=1)+
geom_text(aes(3,192000,label = "Daily Sorter Capacity 192,000", vjust = 1),colour="#535353")+
geom_hline(yintercept=240000,colour="#535353",size=1)+
geom_text(aes(3,240000,label = "Daily Sorter Capacity 240,000", vjust = -1),colour="#535353")+
ggtitle("Daily Required Qty for Sorter/OPEX by Parcel Stops - 2016") +
scale_y_continuous(limits = c(0,1200000))
LPC2016<-figList2016[[2]]+
ggtitle("Daily Required LPCnt for Sorter/OPEX by Parcel Stops - 2016") +
scale_y_continuous(limits = c(0,44000))
figList2017 <- PlotByStopV2(datPeakDaily2017)
Qty2017<-figList2017[[1]]+
geom_hline(yintercept=192000,colour="#535353",size=1)+
geom_text(aes(3,192000,label = "Daily Sorter Capacity 192,000", vjust = 1),colour="#535353")+
geom_hline(yintercept=240000,colour="#535353",size=1)+
geom_text(aes(3,240000,label = "Daily Sorter Capacity 240,000", vjust = -1),colour="#535353")+
ggtitle("Daily Required Qty for Sorter/OPEX by Parcel Stops - 2017") +
scale_y_continuous(limits = c(0,1200000))
LPC2017<-figList2017[[2]]+
ggtitle("Daily Required LPCnt for Sorter/OPEX by Parcel Stops - 2017") +
scale_y_continuous(limits = c(0,44000))
figList2018 <- PlotByStopV2(datPeakDaily2018)
Qty2018<-figList2018[[1]]+
geom_hline(yintercept=192000,colour="#535353",size=1)+
geom_text(aes(3,192000,label = "Daily Sorter Capacity 192,000", vjust = 1),colour="#535353")+
geom_hline(yintercept=240000,colour="#535353",size=1)+
geom_text(aes(3,240000,label = "Daily Sorter Capacity 240,000", vjust = -1),colour="#535353")+
ggtitle("Daily Required Qty for Sorter/OPEX by Parcel Stops - 2018") +
scale_y_continuous(limits = c(0,1200000))
LPC2018<-figList2018[[2]]+
ggtitle("Daily Required LPCnt for Sorter/OPEX by Parcel Stops - 2018") +
scale_y_continuous(limits = c(0,44000))
figList2019 <- PlotByStopV2(datPeakDaily2019)
Qty2019<-figList2019[[1]]+
geom_hline(yintercept=192000,colour="#535353",size=1)+
geom_text(aes(3,192000,label = "Daily Sorter Capacity 192,000", vjust = 1),colour="#535353")+
geom_hline(yintercept=240000,colour="#535353",size=1)+
geom_text(aes(3,240000,label = "Daily Sorter Capacity 240,000", vjust = -1),colour="#535353")+
ggtitle("Daily Required Qty for Sorter/OPEX by Parcel Stops - 2019") +
scale_y_continuous(limits = c(0,1200000))
LPC2019<-figList2019[[2]]+
ggtitle("Daily Required LPCnt for Sorter/OPEX by Parcel Stops - 2019") +
scale_y_continuous(limits = c(0,44000))
figListPeak <- PlotByStopV2(datPeakDaily2020)
Qty2020<-figListPeak[[1]]+
geom_hline(yintercept=192000,colour="#535353",size=1)+
geom_text(aes(3,192000,label = "Daily Sorter Capacity 192,000", vjust = 1),colour="#535353")+
geom_hline(yintercept=240000,colour="#535353",size=1)+
geom_text(aes(3,240000,label = "Daily Sorter Capacity 240,000", vjust = -1),colour="#535353")+
ggtitle("Daily Required Qty for Sorter/OPEX by Parcel Stops - 2020") +
scale_y_continuous(limits = c(0,1200000))
LPC2020<-figListPeak[[2]]+
ggtitle("Daily Required LPCnt for Sorter/OPEX by Parcel Stops - 2020") +
scale_y_continuous(limits = c(0,44000))
Qty2016
LPC2016
Qty2017
LPC2017
Qty2018
LPC2018
Qty2019
LPC2019
Qty2020
LPC2020
sum(datPeakDaily2016$TotalQty)
AvgSum <- data.frame(Year=c("2014","2015","2016","2017","2018","2019","2020"),
TotalQty=c(sum(dat2014Daily$TotalQty),
sum(dat2015Daily$TotalQty),
sum(dat2016Daily$TotalQty),
sum(dat2017Daily$TotalQty),
sum(dat2018Daily$TotalQty),
sum(dat2019Daily$TotalQty),
sum(dat2020Daily$TotalQty),),
LPCnt=c(sum(dat2014Daily$LPCnt),
sum(dat2015Daily$LPCnt),
sum(dat2016Daily$LPCnt),
sum(dat2017Daily$LPCnt),
sum(dat2018Daily$LPCnt),
sum(dat2019Daily$LPCnt),
sum(dat2020Daily$LPCnt),)
)
AvgSum <- data.frame(Year=c("2014","2015","2016","2017","2018","2019","2020"),
TotalQty=c(sum(dat2014Daily$TotalQty),
sum(dat2015Daily$TotalQty),
sum(dat2016Daily$TotalQty),
sum(dat2017Daily$TotalQty),
sum(dat2018Daily$TotalQty),
sum(dat2019Daily$TotalQty),
sum(dat2020Daily$TotalQty)),
LPCnt=c(sum(dat2014Daily$LPCnt),
sum(dat2015Daily$LPCnt),
sum(dat2016Daily$LPCnt),
sum(dat2017Daily$LPCnt),
sum(dat2018Daily$LPCnt),
sum(dat2019Daily$LPCnt),
sum(dat2020Daily$LPCnt))
)
PeakSum <- data.frame(Year=c("2016","2017","2018","2019","2020"),
TotalQty=c(sum(datPeakDaily2016$TotalQty),
sum(datPeakDaily2017$TotalQty),
sum(datPeakDaily2018$TotalQty),
sum(datPeakDaily2019$TotalQty),
sum(datPeakDaily2020$TotalQty)),
LPCnt=c(sum(datPeakDaily2016$LPCnt),
sum(datPeakDaily2017$LPCnt),
sum(datPeakDaily2018$LPCnt),
sum(datPeakDaily2019$LPCnt),
sum(datPeakDaily2020$LPCnt))
)
library(gtable)
g1<-ggplot_gtable(ggplot_build(TotalQtyPlot))
g2<-ggplot_gtable(ggplot_build(PLCntPlot))
pp<-c(subset(g1$layout,name=="panel",se=t:r))
g<-gtable_add_grob(g1, g2$grobs[[which(g2$layout$name=="panel")]],pp$t,pp$l,pp$b,pp$l)
ia<-which(g2$layout$name=="axis-l")
ga <- g2$grobs[[ia]]
ax <- ga$children[[2]]
ax$widths <- rev(ax$widths)
ax$grobs <- rev(ax$grobs)
ax$grobs[[1]]$x <- ax$grobs[[1]]$x - unit(1, "npc") + unit(0.15, "cm")
g <- gtable_add_cols(g, g2$widths[g2$layout[ia, ]$l], length(g$widths) - 1)
g <- gtable_add_grob(g, ax, pp$t, length(g$widths) - 1, pp$b)
grid.draw(g)
TotalQtyPlot <- ggplot(plotDatP[plotDatP$ParcelStops<16,],aes(x=as.factor(ParcelStops),y=TotalQty,gour=Year))+
geom_bar(stat="identity",aes(fill=Year),position="dodge")+
geom_hline(yintercept=192000,colour="#535353",size=0.5)+
geom_text(aes(4,192000,label = "Daily Sorter Capacity 192,000", vjust = 1),colour="white")+
geom_hline(yintercept=240000,colour="#535353",size=0.5)+
geom_text(aes(4,240000,label = "Daily Sorter Capacity 240,000", vjust = -1),colour="white")+
scale_y_continuous(breaks = seq(0,1200000,by=100000),limits = c(0,1200000))+
scale_fill_manual(values=c("#9FDF58", "#7FB843", "#70A439", "#60912F", "#517E25"))+
labs(x="Number of Total Stops(and above)",y="Total Qty")+
ggtitle(expression(atop("Required Qty for Sorter/OPEX by Parcel Stops", atop(italic("Peak Day"), "")))) +
theme(plot.title = element_text(size = 15, face = "bold", colour = "black", vjust = -1),legend.position="bottom")
TotalQtyPlot
ia<-which(g2$layout$name=="axis-l")
ga <- g2$grobs[[ia]]
ax <- ga$children[[2]]
ax$widths <- rev(ax$widths)
ax$grobs <- rev(ax$grobs)
ax$grobs[[1]]$x <- ax$grobs[[1]]$x - unit(1, "npc") + unit(0.15, "cm")
g <- gtable_add_cols(g, g2$widths[g2$layout[ia, ]$l], length(g$widths) - 1)
g <- gtable_add_grob(g, ax, pp$t, length(g$widths) - 1, pp$b)
grid.draw(g)
# Total Qty Plot
TotalQtyPlot <- ggplot(plotDatP[plotDatP$ParcelStops<16,],aes(x=as.factor(ParcelStops),y=TotalQty,gour=Year))+
geom_bar(stat="identity",aes(fill=Year),position="dodge")+
geom_hline(yintercept=192000,colour="#535353",size=0.5)+
geom_text(aes(4,192000,label = "Daily Sorter Capacity 192,000", vjust = 1),colour="white")+
geom_hline(yintercept=240000,colour="#535353",size=0.5)+
geom_text(aes(4,240000,label = "Daily Sorter Capacity 240,000", vjust = -1),colour="white")+
scale_y_continuous(breaks = seq(0,1200000,by=100000),limits = c(0,1200000))+
scale_fill_manual(values=c("#9FDF58", "#7FB843", "#70A439", "#60912F", "#517E25"))+
labs(x="Number of Total Stops(and above)",y="Total Qty")+
ggtitle(expression(atop("Required Qty for Sorter/OPEX by Parcel Stops", atop(italic("Peak Day"), "")))) +
theme(plot.title = element_text(size = 15, face = "bold", colour = "black", vjust = -1),legend.position="bottom")
TotalQtyPlot
PLCntPlot <- ggplot(plotDatP[plotDatP$ParcelStops<16,],aes(x=as.factor(ParcelStops),y=LPCnt,gour=Year))+
geom_bar(stat="identity",aes(fill=Year),position="dodge")+
scale_y_continuous(breaks = seq(0,44000,by=4000),limits = c(0,44000))+
scale_fill_manual(values=c("#9FDF58", "#7FB843", "#70A439", "#60912F", "#517E25"))+
labs(x="Number of Total Stops(and above)",y="LPCnt")+
ggtitle(expression(atop("Required LPCnt for Sorter/OPEX by Parcel Stops", atop(italic("Peak Day"), "")))) +
theme(plot.title = element_text(size = 15, face = "bold", colour = "black", vjust = -1),legend.position="bottom")
PLCntHrPlot <- ggplot(plotDatP[plotDatP$ParcelStops<16,],aes(x=as.factor(ParcelStops),y=LPCnt/16,gour=Year))+
geom_bar(stat="identity",aes(fill=Year),position="dodge")+
scale_y_continuous(breaks = seq(0,2750,by=250),limits = c(0,2750))+
scale_fill_manual(values=c("#9FDF58", "#7FB843", "#70A439", "#60912F", "#517E25"))+
labs(x="Number of Total Stops(and above)",y="Hourly LPCnt")
g1<-ggplot_gtable(ggplot_build(PLCntPlot))
g2<-ggplot_gtable(ggplot_build(PLCntHrPlot))
pp<-c(subset(g1$layout,name=="panel",se=t:r))
g<-gtable_add_grob(g1, g2$grobs[[which(g2$layout$name=="panel")]],pp$t,pp$l,pp$b,pp$l)
ia<-which(g2$layout$name=="axis-l")
ga <- g2$grobs[[ia]]
ax <- ga$children[[2]]
ax$widths <- rev(ax$widths)
ax$grobs <- rev(ax$grobs)
ax$grobs[[1]]$x <- ax$grobs[[1]]$x - unit(1, "npc") + unit(0.15, "cm")
g <- gtable_add_cols(g, g2$widths[g2$layout[ia, ]$l], length(g$widths) - 1)
g <- gtable_add_grob(g, ax, pp$t, length(g$widths) - 1, pp$b)
grid.draw(g)
PLCntPlot <- ggplot(plotDat[plotDat$ParcelStops<16,],aes(x=as.factor(ParcelStops),y=LPCnt,gour=Year))+
geom_bar(stat="identity",aes(fill=Year),position="dodge")+
scale_y_continuous(breaks = seq(0,44000,by=4000),limits = c(0,44000))+
scale_fill_manual(values=c("#9FDF58", "#8FCB4D", "#7FB843", "#70A439", "#60912F", "#517E25", "#006600"))+
labs(x="Number of Total Stops(and above)",y="LPCnt")+
ggtitle(expression(atop("Required LPCnt for Sorter/OPEX by Parcel Stops", atop(italic("November Daily Avg."), "")))) +
theme(plot.title = element_text(size = 15, face = "bold", colour = "black", vjust = -1),legend.position="bottom")
PLCntHrPlot <- ggplot(plotDat[plotDat$ParcelStops<16,],aes(x=as.factor(ParcelStops),y=LPCnt/16,gour=Year))+
geom_bar(stat="identity",aes(fill=Year),position="dodge")+
scale_y_continuous(breaks = seq(0,2750,by=250),limits = c(0,2750))+
scale_fill_manual(values=c("#9FDF58", "#8FCB4D", "#7FB843", "#70A439", "#60912F", "#517E25", "#006600"))+
labs(x="Number of Total Stops(and above)",y="Hourly LPCnt")
g1<-ggplot_gtable(ggplot_build(PLCntPlot))
g2<-ggplot_gtable(ggplot_build(PLCntHrPlot))
pp<-c(subset(g1$layout,name=="panel",se=t:r))
g<-gtable_add_grob(g1, g2$grobs[[which(g2$layout$name=="panel")]],pp$t,pp$l,pp$b,pp$l)
ia<-which(g2$layout$name=="axis-l")
ga <- g2$grobs[[ia]]
ax <- ga$children[[2]]
ax$widths <- rev(ax$widths)
ax$grobs <- rev(ax$grobs)
ax$grobs[[1]]$x <- ax$grobs[[1]]$x - unit(1, "npc") + unit(0.15, "cm")
g <- gtable_add_cols(g, g2$widths[g2$layout[ia, ]$l], length(g$widths) - 1)
g <- gtable_add_grob(g, ax, pp$t, length(g$widths) - 1, pp$b)
grid.draw(g)
pp
ggplot_dual_axis(lhs = PLCntPlot, rhs = PLCntHrPlot)
ggplot_dual_axis <- function(lhs, rhs, axis.title.y.rhs = "rotate") {
# 1. Fix the right y-axis label justification
rhs <- rhs + theme(axis.text.y = element_text(hjust = 0))
# 2. Rotate the right y-axis label by 270 degrees by default
if (missing(axis.title.y.rhs) |
axis.title.y.rhs %in% c("rotate", "rotated")) {
rhs <- rhs + theme(axis.title.y = element_text(angle = 270))
}
# 3a. Use only major grid lines for the left axis
lhs <- lhs + theme(panel.grid.minor = element_blank())
# 3b. Use only major grid lines for the right axis
#     force transparency of the backgrounds to allow grid lines to show
rhs <- rhs + theme(panel.grid.minor = element_blank(),
panel.background = element_rect(fill = "transparent", colour = NA),
plot.background = element_rect(fill = "transparent", colour = NA))
# Process gtable objects
# 4. Extract gtable
library("gtable") # loads the grid package
g1 <- ggplot_gtable(ggplot_build(lhs))
g2 <- ggplot_gtable(ggplot_build(rhs))
# 5. Overlap the panel of the rhs plot on that of the lhs plot
pp <- c(subset(g1$layout, name == "panel", se = t:r))
g <- gtable_add_grob(g1,
g2$grobs[[which(g2$layout$name == "panel")]], pp$t, pp$l, pp$b, pp$l)
# Tweak axis position and labels
ia <- which(g2$layout$name == "axis-l")
ga <- g2$grobs[[ia]]
ax <- ga$children[["axis"]]  # ga$children[[2]]
ax$widths <- rev(ax$widths)
ax$grobs <- rev(ax$grobs)
ax$grobs[[1]]$x <- ax$grobs[[1]]$x - unit(1, "npc") + unit(0.15, "cm")
g <- gtable_add_cols(g, g2$widths[g2$layout[ia, ]$l], length(g$widths) - 1)
g <- gtable_add_grob(g, ax, pp$t, length(g$widths) - 1, pp$b)
g <- gtable_add_grob(g, g2$grobs[[7]], pp$t, length(g$widths), pp$b)
# Display plot with arrangeGrob wrapper arrangeGrob(g)
library("gridExtra")
grid.newpage()
return(arrangeGrob(g))
}
ggplot_dual_axis(lhs = PLCntPlot, rhs = PLCntHrPlot)
ggplot_dual_axis = function(plot1, plot2, which.axis = "x") {
grid.newpage()
# Increase right margin if which.axis == "y"
if(which.axis == "y") plot1 = plot1 + theme(plot.margin = unit(c(0.7, 1.5, 0.4, 0.4), "cm"))
# Extract gtable
g1 = ggplot_gtable(ggplot_build(plot1))
g2 = ggplot_gtable(ggplot_build(plot2))
# Overlap the panel of the second plot on that of the first
pp = c(subset(g1$layout, name == "panel", se = t:r))
g = gtable_add_grob(g1, g2$grobs[[which(g2$layout$name == "panel")]], pp$t, pp$l, pp$b, pp$l)
# Steal axis from second plot and modify
axis.lab = ifelse(which.axis == "x", "axis-b", "axis-l")
ia = which(g2$layout$name == axis.lab)
ga = g2$grobs[[ia]]
ax = ga$children[[2]]
# Switch position of ticks and labels
if(which.axis == "x") ax$heights = rev(ax$heights) else ax$widths = rev(ax$widths)
ax$grobs = rev(ax$grobs)
if(which.axis == "x")
ax$grobs[[2]]$y = ax$grobs[[2]]$y - unit(1, "npc") + unit(0.15, "cm") else
ax$grobs[[1]]$x = ax$grobs[[1]]$x - unit(1, "npc") + unit(0.15, "cm")
# Modify existing row to be tall enough for axis
if(which.axis == "x") g$heights[[2]] = g$heights[g2$layout[ia,]$t]
# Add new row or column for axis label
if(which.axis == "x") {
g = gtable_add_grob(g, ax, 2, 4, 2, 4)
g = gtable_add_rows(g, g2$heights[1], 1)
g = gtable_add_grob(g, g2$grob[[6]], 2, 4, 2, 4)
} else {
g = gtable_add_cols(g, g2$widths[g2$layout[ia, ]$l], length(g$widths) - 1)
g = gtable_add_grob(g, ax, pp$t, length(g$widths) - 1, pp$b)
g = gtable_add_grob(g, g2$grob[[7]], pp$t, length(g$widths), pp$b - 1)
}
# Draw it
grid.draw(g)
}
ggplot_dual_axis(lhs = PLCntPlot, rhs = PLCntHrPlot)
ggplot_dual_axis(PLCntPlot, PLCntHrPlot)
ggplot_dual_axis(PLCntPlot, PLCntHrPlot,"y")
source('C:/Users/bzou/workspace/Scholastic/R/JeanieRequestDataAnalysis.R')
PeakTotalQty <- ggplot(PeakSum,aes(x=as.factor(Year),y=TotalQty))+
geom_bar(stat="identity")+
labs(title="Daily Total Qty",x="Year",y="Total Qty")
PeakTotalQty
PeakTotalQty <- ggplot(PeakSum,aes(x=as.factor(Year),y=TotalQty))+
geom_bar(stat="identity",fill="#7BBE31")+
labs(title="Daily Total Qty",x="Year",y="Total Qty")
PeakTotalQty
PeakTotalQty <- ggplot(PeakSum,aes(x=as.factor(Year),y=TotalQty))+
geom_bar(stat="identity",fill="#7BBE31")+
geom_text(aes(label=round(TotalQty,0),angle=90,y = TotalQty, ymax = TotalQty, hjust = 1),colour="white") +
theme(axis.text.y=element_blank()) +
labs(title="Daily Total Qty",x="Year",y="Total Qty")
PeakTotalQty
PeakTotalQty <- ggplot(PeakSum,aes(x=as.factor(Year),y=TotalQty))+
geom_bar(stat="identity",fill="#7BBE31")+
scale_y_continuous(breaks = seq(0,1200000,by=100000),limits = c(0,1200000))+
labs(title="Daily Total Qty",x="Year",y="Total Qty")
PeakTotalQty
PeakLPCnt <- ggplot(PeakSum,aes(x=as.factor(Year),y=LPCnt))+
geom_bar(stat="identity",fill="#7BBE31")+
scale_y_continuous(breaks = seq(0,44000,by=4000),limits = c(0,44000))+
labs(title="Daily Total Qty",x="Year",y="LPCnt")
PeakLPCnt
PeakLPCnt <- ggplot(PeakSum,aes(x=as.factor(Year),y=LPCnt))+
geom_bar(stat="identity",fill="#7BBE31")+
scale_y_continuous(breaks = seq(0,48000,by=4000),limits = c(0,48000))+
labs(title="Daily Total Qty",x="Year",y="LPCnt")
PeakLPCnt
grid.arrange(PeakTotalQty,PeakLPCnt,ncol=2,title="Pead Day Daily Volumn")
grid.arrange(PeakTotalQty,PeakLPCnt,ncol=2,main="Pead Day Daily Volumn")
PeakLPCnt <- ggplot(PeakSum,aes(x=as.factor(Year),y=LPCnt))+
geom_bar(stat="identity",fill="#7BBE31")+
scale_y_continuous(breaks = seq(0,48000,by=4000),limits = c(0,48000))+
labs(title="Daily LPCnt",x="Year",y="LPCnt")
grid.arrange(PeakTotalQty,PeakLPCnt,ncol=2,main="Pead Day Daily Volumn")
grid.arrange(PeakTotalQty,PeakLPCnt,ncol=2,main="Peak Day Daily Volumn")
grid.arrange(PeakTotalQty,PeakLPCnt,ncol=2,main="Peak Day Daily Volume")
TotalQtyPlot <- ggplot(plotDatP[plotDatP$ParcelStops<16,],aes(x=as.factor(ParcelStops),y=TotalQty,gour=Year))+
geom_bar(stat="identity",aes(fill=Year),position="dodge")+
geom_hline(yintercept=192000,colour="#535353",size=0.5)+
geom_text(aes(4,192000,label = "Daily Sorter Capacity 192,000", vjust = 1),colour="white")+
geom_hline(yintercept=240000,colour="#535353",size=0.5)+
geom_text(aes(4,240000,label = "Daily Sorter Capacity 240,000", vjust = -1),colour="white")+
scale_y_continuous(breaks = seq(0,1200000,by=100000),limits = c(0,1200000))+
scale_fill_manual(values=c("#9FDF58", "#7FB843", "#70A439", "#60912F", "#517E25"))+
labs(x="Number of Total Stops(and above)",y="Total Qty")+
ggtitle(expression(atop("Required Qty for Sorter/OPEX by Parcel Stops", atop(italic("Peak Day"), "")))) +
theme(plot.title = element_text(size = 15, face = "bold", colour = "black", vjust = -1),legend.position="bottom")
TotalQtyPlot
# Total Qty Plot
TotalQtyPlot <- ggplot(plotDatP[plotDatP$ParcelStops<16,],aes(x=as.factor(ParcelStops),y=TotalQty,gour=Year))+
geom_bar(stat="identity",aes(fill=Year),position="dodge")+
geom_hline(yintercept=192000,colour="#535353",size=0.5)+
geom_text(aes(4,192000,label = "Daily Sorter Capacity 192,000", vjust = 1),colour="white")+
geom_hline(yintercept=240000,colour="#535353",size=0.5)+
geom_text(aes(4,240000,label = "Daily Sorter Capacity 240,000", vjust = -2),colour="white")+
scale_y_continuous(breaks = seq(0,1200000,by=100000),limits = c(0,1200000))+
scale_fill_manual(values=c("#9FDF58", "#7FB843", "#70A439", "#60912F", "#517E25"))+
labs(x="Number of Total Stops(and above)",y="Total Qty")+
ggtitle(expression(atop("Required Qty for Sorter/OPEX by Parcel Stops", atop(italic("Peak Day"), "")))) +
theme(plot.title = element_text(size = 15, face = "bold", colour = "black", vjust = -1),legend.position="bottom")
TotalQtyPlot
TotalQtyPlot <- ggplot(plotDatP[plotDatP$ParcelStops<16,],aes(x=as.factor(ParcelStops),y=TotalQty,gour=Year))+
geom_bar(stat="identity",aes(fill=Year),position="dodge")+
geom_hline(yintercept=192000,colour="#535353",size=0.5)+
geom_text(aes(4,192000,label = "Daily Sorter Capacity 192,000", vjust = 1.5),colour="white")+
geom_hline(yintercept=240000,colour="#535353",size=0.5)+
geom_text(aes(4,240000,label = "Daily Sorter Capacity 240,000", vjust = -0.5),colour="white")+
scale_y_continuous(breaks = seq(0,1200000,by=100000),limits = c(0,1200000))+
scale_fill_manual(values=c("#9FDF58", "#7FB843", "#70A439", "#60912F", "#517E25"))+
labs(x="Number of Total Stops(and above)",y="Total Qty")+
ggtitle(expression(atop("Required Qty for Sorter/OPEX by Parcel Stops", atop(italic("Peak Day"), "")))) +
theme(plot.title = element_text(size = 15, face = "bold", colour = "black", vjust = -1),legend.position="bottom")
TotalQtyPlot
TotalQtyPlot <- ggplot(plotDat[plotDat$ParcelStops<16,],aes(x=as.factor(ParcelStops),y=TotalQty,gour=Year))+
geom_bar(stat="identity",aes(fill=Year),position="dodge")+
geom_hline(yintercept=192000,colour="#535353",size=0.5)+
geom_text(aes(4,192000,label = "Daily Sorter Capacity 192,000", vjust = 1.5),colour="white")+
geom_hline(yintercept=240000,colour="#535353",size=0.5)+
geom_text(aes(4,240000,label = "Daily Sorter Capacity 240,000", vjust = -0.5),colour="white")+
#     scale_y_continuous(limits = c(0,1000000))+
scale_y_continuous(breaks = seq(0,1200000,by=100000),limits = c(0,1200000))+
scale_fill_manual(values=c("#9FDF58", "#8FCB4D", "#7FB843", "#70A439", "#60912F", "#517E25", "#006600"))+
labs(x="Number of Total Stops(and above)",y="Total Qty")+
ggtitle(expression(atop("Required Qty for Sorter/OPEX by Parcel Stops", atop(italic("November Daily Avg."), "")))) +
theme(plot.title = element_text(size = 15, face = "bold", colour = "black", vjust = -1),legend.position="bottom")
TotalQtyPlot
rm(list=s())
rm(list=ls())
install.packages(c('rzmq','repr','IRkernel','IRdisplay'),
repos = c('http://irkernel.github.io/', getOption('repos')))
IRkernel::installspec()
IRkernel::installspec(user = FALSE)
require(devtools)
install_github('rCharts', 'ramnathv')
install.packages("devtools")
install.packages("devtools")
require(devtools)
install_github('rCharts', 'ramnathv')
install_github("rCgarts","ramnathv")
library(devtools)
library("devtools")
install.packages("devtools")
library("devtools")
library(devtools)
install_github("youruser/yourrepo")
install.packages("devtools")
install.packages("Rcpp")
library(devtools)
library(Rcpp)
install_github('ramnathv/rCharts')
install_github('rCharts', 'ramnathv')
install_github('ramnathv/rCharts')
install.packages("stringi")
install_github('ramnathv/rCharts')
dir <- "C:/Users/bzou/Documents/R/Developing Data Products/Course-Project/"
setwd(dir)
library(shiny)
mu <- 5
sd <- 1
n <- 40
times <- 1000
distribution <- matrix(data=rnorm(n * times, mu,sd), nrow=times)
mns <- data.frame(means=apply(distribution, 1, mean))
header(mns)
head(mns)
?scale_colour_manual
geom_histogram(aes(y=..density..,colour = "Sample Mean")) +
geom_vline(xintercept = mu, aes(colour = "Theoretical Mean")) +
scale_colour_manual(name="",breaks = c("Sample Mean","Theoretical Mean"),values=c("black","red"))
ggplot(mns,aes(means)) +
geom_hist(aes(y=..density..,colour = "Sample Mean")) +
geom_vline(xintercept = mu, aes(colour = "Theoretical Mean")) +
scale_colour_manual(name="",breaks = c("Sample Mean","Theoretical Mean"),values=c("black","red"))
library(ggplot2)
ggplot(mns,aes(means)) +
geom_histogram(aes(y=..density..,colour = "Sample Mean")) +
geom_vline(xintercept = mu, aes(colour = "Theoretical Mean")) +
scale_colour_manual(name="",breaks = c("Sample Mean","Theoretical Mean"),values=c("black","red"))
ggplot(mns,aes(means)) +
geom_histogram(aes(y=..density..,colour = "Sample Mean")) +
geom_vline(xintercept = mu, aes(colour = "Theoretical Mean")) +
scale_colour_manual(name="",breaks = c("Sample Mean","Theoretical Mean"),values=c("blue","red"))
geom_histogram(aes(y=..density..,colour = "Sample Mean")) +
geom_vline(xintercept = mu, aes(colour = "Theoretical Mean")) +
scale_colour_manual(name="",breaks = c("Sample Mean","Theoretical Mean"),values=c("black","red"))
ggplot(mns,aes(means)) +
geom_histogram(aes(y=..density..,colour = "Sample Mean")) +
geom_vline(xintercept = mu, aes(colour = "Theoretical Mean")) +
scale_colour_manual(name="",breaks = c("Sample Mean","Theoretical Mean"),values=c("black","red"))
ggplot(mns,aes(means)) +
geom_histogram(aes(y=..density..,colour = "Sample Mean")) +
geom_vline(xintercept = mu, aes(colour = "Theoretical Mean")) +
scale_colour_manual(name="",values=c("black","red"))
ggplot(mns,aes(means)) +
geom_histogram(aes(y=..density..,colour = "Sample Mean")) +
geom_vline(xintercept = mu, colour = "Theoretical Mean") +
scale_colour_manual(name="",values=c("black","red"))
ggplot(mns,aes(means)) +
geom_histogram(aes(y=..density..,colour = "Sample Mean")) +
geom_vline(xintercept = mu, aes(colour = "Theoretical Mean")) +
scale_colour_manual(name="",values=c("Sample Mean"="black","Theoretical Mean"="red"))
ggplot(mns,aes(means)) +
geom_histogram(aes(y=..density..,colour = "Sample Mean")) +
geom_vline(aes(xintercept = mu, colour = "Theoretical Mean")) +
scale_colour_manual(name="",values=c("Sample Mean"="black","Theoretical Mean"="red"))
ggplot(mns,aes(means)) +
geom_histogram(aes(y=..density..,colour = "Sample Mean")) +
geom_vline(aes(xintercept = mu, colour = "Theoretical Mean")) +
scale_colour_manual(name="",values=c("Sample Mean"="grey","Theoretical Mean"="red"))
ggplot(mns,aes(means)) +
geom_histogram(aes(y=..density..,colour = "Sample Mean")) +
geom_vline(aes(xintercept = mu, colour = "Theoretical Mean")) +
scale_colour_manual(name="",values=c("Sample Mean"="grey","Theoretical Mean"="red")) +
ggtitle("Distribution of Sample Means vs. Theoretical Mean")
distribution <- matrix(data=sample(mu,n * times,TRUE), nrow=times)
mns <- data.frame(means=apply(distribution, 1, mean))
ggplot(mns,aes(means)) +
geom_histogram(aes(y=..density..,colour = "Sample Mean")) +
geom_vline(aes(xintercept = mu, colour = "Theoretical Mean")) +
scale_colour_manual(name="",values=c("Sample Mean"="grey","Theoretical Mean"="red")) +
ggtitle("Distribution of Sample Means vs. Theoretical Mean")
distribution <- matrix(data=sample(mu,n * times), nrow=times)
distribution <- matrix(data=sample(mu,n * times,TRUE), nrow=times)
mns <- data.frame(means=apply(distribution, 1, mean))
mean(mns[,mean])
mean(mns$mean)
?sample
distribution <- matrix(data=rexp(n * times, 1/mu), nrow=times)
mns <- data.frame(means=apply(distribution, 1, mean))
ggplot(mns,aes(means)) +
geom_histogram(aes(y=..density..,colour = "Sample Mean")) +
geom_vline(aes(xintercept = mu, colour = "Theoretical Mean")) +
scale_colour_manual(name="",values=c("Sample Mean"="grey","Theoretical Mean"="red")) +
ggtitle("Distribution of Sample Means vs. Theoretical Mean")
distSample <- rpois(1000,mu)
dat = data.frame(num = distSample)
ggplot(dat,aes(num)) +
geom_density(aes(y=..density..)) +
ggtitle("Example of Sample Data")
distribution <- matrix(data=rpois(n * times,mu), nrow=times)
mns <- data.frame(means=apply(distribution, 1, mean))
ggplot(mns,aes(means)) +
geom_histogram(aes(y=..density..,colour = "Sample Mean")) +
geom_vline(aes(xintercept = mu, colour = "Theoretical Mean")) +
scale_colour_manual(name="",values=c("Sample Mean"="grey","Theoretical Mean"="red")) +
ggtitle("Distribution of Sample Means vs. Theoretical Mean")
runApp()
dir <- "C:/Users/bzou/Documents/R/Developing Data Products/Course-Project/"
setwd(dir)
runApp()
runApp()
library(shiny)
runApp()
